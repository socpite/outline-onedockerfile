#!/bin/bash
# Outline API Export Script
# Uses Outline's built-in export API to trigger exports programmatically

set -e

API_URL="http://localhost:3000"
API_TOKEN=""
COLLECTION_ID=""
FORMAT="json"
INCLUDE_ATTACHMENTS=true
OUTPUT_DIR=""
WAIT_FOR_COMPLETION=true
VERBOSE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Trigger Outline export via API (alternative to web UI)"
    echo ""
    echo "Options:"
    echo "  -t, --token TOKEN     API token (required)"
    echo "  -u, --url URL         Outline URL (default: http://localhost:3000)"
    echo "  -c, --collection ID   Export specific collection (optional)"
    echo "  -f, --format FORMAT   Export format: json, markdown, html (default: json)"
    echo "  -o, --output DIR      Download to directory (optional)"
    echo "  --no-attachments      Exclude attachments"
    echo "  --no-wait            Don't wait for completion"
    echo "  -v, --verbose        Verbose output"
    echo "  -h, --help           Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 -t your-api-token"
    echo "  $0 -t your-api-token -c collection-id -f markdown"
    echo "  $0 -t your-api-token -o ./downloads --no-wait"
}

log() {
    if [[ "$VERBOSE" == true ]]; then
        echo -e "${BLUE}[INFO]${NC} $1"
    fi
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

check_dependencies() {
    if ! command -v curl &> /dev/null; then
        error "curl not found. Please install curl."
    fi
    
    if ! command -v jq &> /dev/null; then
        warn "jq not found. JSON parsing will be limited."
    fi
}

trigger_export() {
    log "Triggering export via API..."
    
    local payload="{\"format\":\"$FORMAT\",\"includeAttachments\":$INCLUDE_ATTACHMENTS"
    
    if [[ -n "$COLLECTION_ID" ]]; then
        payload="$payload,\"collectionId\":\"$COLLECTION_ID\""
    fi
    
    payload="$payload}"
    
    log "Payload: $payload"
    
    local response=$(curl -s -X POST \
        -H "Authorization: Bearer $API_TOKEN" \
        -H "Content-Type: application/json" \
        -d "$payload" \
        "$API_URL/api/collections.export" 2>/dev/null)
    
    if [[ $? -ne 0 ]]; then
        error "Failed to connect to Outline API at $API_URL"
    fi
    
    log "API Response: $response"
    
    # Parse response
    if command -v jq &> /dev/null; then
        local export_id=$(echo "$response" | jq -r '.data.fileOperation.id // empty' 2>/dev/null)
        local state=$(echo "$response" | jq -r '.data.fileOperation.state // empty' 2>/dev/null)
        
        if [[ -n "$export_id" ]]; then
            echo "üì§ Export started with ID: $export_id"
            echo "üìä Status: $state"
            
            if [[ "$WAIT_FOR_COMPLETION" == true ]]; then
                wait_for_export "$export_id"
            else
                echo "üèÉ Not waiting for completion (use --wait to wait)"
            fi
        else
            error "Failed to start export. Response: $response"
        fi
    else
        echo "üì§ Export request sent. Response: $response"
    fi
}

wait_for_export() {
    local export_id="$1"
    log "Waiting for export $export_id to complete..."
    
    local max_attempts=60  # 10 minutes max
    local attempt=0
    
    while [[ $attempt -lt $max_attempts ]]; do
        local response=$(curl -s -X GET \
            -H "Authorization: Bearer $API_TOKEN" \
            "$API_URL/api/fileOperations.list" 2>/dev/null)
        
        if command -v jq &> /dev/null; then
            local state=$(echo "$response" | jq -r ".data[] | select(.id == \"$export_id\") | .state" 2>/dev/null)
            local download_url=$(echo "$response" | jq -r ".data[] | select(.id == \"$export_id\") | .url" 2>/dev/null)
            
            case "$state" in
                "completed")
                    success "Export completed!"
                    if [[ -n "$download_url" && "$download_url" != "null" ]]; then
                        echo "üì• Download URL: $download_url"
                        
                        if [[ -n "$OUTPUT_DIR" ]]; then
                            download_export "$download_url" "$export_id"
                        fi
                    fi
                    return 0
                    ;;
                "error")
                    error "Export failed"
                    ;;
                "creating"|"processing")
                    echo "‚è≥ Export in progress... ($state)"
                    ;;
                *)
                    log "Unknown state: $state"
                    ;;
            esac
        else
            echo "‚è≥ Checking export status... (attempt $((attempt + 1)))"
        fi
        
        sleep 10
        ((attempt++))
    done
    
    warn "Export did not complete within expected time"
}

download_export() {
    local download_url="$1"
    local export_id="$2"
    
    log "Downloading export to $OUTPUT_DIR..."
    
    mkdir -p "$OUTPUT_DIR"
    
    local filename="outline-export-$export_id-$(date +%Y%m%d_%H%M%S)"
    
    # Determine file extension based on format
    case "$FORMAT" in
        "json")
            filename="$filename.json"
            ;;
        "markdown")
            filename="$filename.zip"
            ;;
        "html")
            filename="$filename.zip"
            ;;
        *)
            filename="$filename.zip"
            ;;
    esac
    
    local output_path="$OUTPUT_DIR/$filename"
    
    if curl -L -o "$output_path" \
        -H "Authorization: Bearer $API_TOKEN" \
        "$download_url"; then
        success "Downloaded to: $output_path"
        
        # Show file info
        local size=$(du -h "$output_path" | cut -f1)
        echo "üìä File size: $size"
    else
        error "Failed to download export"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--token)
            API_TOKEN="$2"
            shift 2
            ;;
        -u|--url)
            API_URL="$2"
            shift 2
            ;;
        -c|--collection)
            COLLECTION_ID="$2"
            shift 2
            ;;
        -f|--format)
            FORMAT="$2"
            shift 2
            ;;
        -o|--output)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --no-attachments)
            INCLUDE_ATTACHMENTS=false
            shift
            ;;
        --no-wait)
            WAIT_FOR_COMPLETION=false
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            ;;
    esac
done

# Validate arguments
if [[ -z "$API_TOKEN" ]]; then
    error "API token is required. Use -t or --token option."
fi

if [[ "$FORMAT" != "json" && "$FORMAT" != "markdown" && "$FORMAT" != "html" ]]; then
    error "Invalid format: $FORMAT. Use json, markdown, or html."
fi

# Main execution
echo "üöÄ Starting Outline API export..."
echo "üåê URL: $API_URL"
echo "üìã Format: $FORMAT"
echo "üìé Include attachments: $INCLUDE_ATTACHMENTS"
if [[ -n "$COLLECTION_ID" ]]; then
    echo "üìö Collection: $COLLECTION_ID"
else
    echo "üìö Scope: Full workspace"
fi
echo ""

check_dependencies
trigger_export